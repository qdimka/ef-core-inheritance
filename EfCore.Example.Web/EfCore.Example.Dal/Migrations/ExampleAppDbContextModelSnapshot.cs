// <auto-generated />
using System;
using EfCore.Example.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EfCore.Example.Dal.Migrations
{
    [DbContext(typeof(ExampleAppDbContext))]
    partial class ExampleAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("EfCore.Example.Domain.Connection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long?>("ConnectionInfoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionInfoId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("EfCore.Example.Domain.ConnectionInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ConnectionInfo");

                    b.HasDiscriminator<string>("Type").HasValue("ConnectionInfo");
                });

            modelBuilder.Entity("EfCore.Example.Domain.MssqlConnectionInfo", b =>
                {
                    b.HasBaseType("EfCore.Example.Domain.ConnectionInfo");

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("MssqlConnectionInfo");
                });

            modelBuilder.Entity("EfCore.Example.Domain.PostgresConnectionInfo", b =>
                {
                    b.HasBaseType("EfCore.Example.Domain.ConnectionInfo");

                    b.Property<string>("Host")
                        .HasColumnName("PostgresConnectionInfo_Host")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnName("PostgresConnectionInfo_Password")
                        .HasColumnType("text");

                    b.Property<string>("Port")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnName("PostgresConnectionInfo_User")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("PostgresConnectionInfo");
                });

            modelBuilder.Entity("EfCore.Example.Domain.ServerConnectionInfo", b =>
                {
                    b.HasBaseType("EfCore.Example.Domain.ConnectionInfo");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("ServerConnectionInfo");
                });

            modelBuilder.Entity("EfCore.Example.Domain.Connection", b =>
                {
                    b.HasOne("EfCore.Example.Domain.ConnectionInfo", "ConnectionInfo")
                        .WithMany()
                        .HasForeignKey("ConnectionInfoId");
                });
#pragma warning restore 612, 618
        }
    }
}
